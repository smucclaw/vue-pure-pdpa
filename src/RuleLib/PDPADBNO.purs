

-- This file was automatically generated by natural4.
-- Do not edit by hand.
-- Instead, revise the toolchain starting at smucclaw/dsl/lib/haskell/natural4/app/Main.hs

module RuleLib.PDPADBNO where

import Prelude
import Data.Either
import Data.Maybe
import Data.Tuple
import Data.Map as Map
import Foreign.Object as Object

import AnyAll.Types

schedule1_part1 :: Item String
schedule1_part1 =

  All
    ( Pre "all of:" )
    [ Any
        ( Pre "Loss or Damage caused by" )
        [ Leaf "rodents"
        , Leaf "insects"
        , Leaf "vermin"
        , Leaf "birds"
        ]
    , Not
        ( Any
            ( Pre "any of:" )
            [ All
                ( Pre "all of:" )
                [ Leaf "Loss or Damage IS to Contents"
                , Leaf "Loss or Damage IS caused by birds"
                ]
            , All
                ( Pre "all of:" )
                [ Leaf "Loss or Damage IS ensuing covered loss"
                , Not
                    ( Any
                        ( Pre "any of:" )
                        [ Leaf "any other exclusion applies"
                        , Any
                            ( Pre "an animal caused water to escape from" )
                            [ Leaf "a household appliance"
                            , Leaf "a swimming pool"
                            , Leaf "a plumbing, heating, or air conditioning system"
                            ]
                        ]
                    )
                ]
            ]
        )
    ]


schedule1_part1_nl :: NLDict
schedule1_part1_nl =
  Map.fromFoldable
    [ ]


toplevelDecisions :: Object.Object (Item String)
toplevelDecisions = Object.fromFoldable [ Tuple "Not Covered If …"
    ( All
        ( Pre "all of:" )
        [ Any
            ( Pre "Loss or Damage caused by" )
            [ Leaf "rodents"
            , Leaf "insects"
            , Leaf "vermin"
            , Leaf "birds"
            ]
        , All
            ( Pre "all of:" )
            [ Any
                ( Pre "any of:" )
                [ Not
                    ( Leaf "Loss or Damage IS to Contents" )
                , Not
                    ( Leaf "Loss or Damage IS caused by birds" )
                ]
            , Any
                ( Pre "any of:" )
                [ Not
                    ( Leaf "Loss or Damage IS ensuing covered loss" )
                , Any
                    ( Pre "any of:" )
                    [ Leaf "any other exclusion applies"
                    , Any
                        ( Pre "an animal caused water to escape from" )
                        [ Leaf "a household appliance"
                        , Leaf "a swimming pool"
                        , Leaf "a plumbing, heating, or air conditioning system"
                        ]
                    ]
                ]
            ]
        ]
    )
, Tuple "Covered If …"
    ( Any
        ( Pre "any of:" )
        [ All
            ( Pre "Loss or Damage caused by" )
            [ Not
                ( Leaf "rodents" )
            , Not
                ( Leaf "insects" )
            , Not
                ( Leaf "vermin" )
            , Not
                ( Leaf "birds" )
            ]
        , Any
            ( Pre "any of:" )
            [ All
                ( Pre "all of:" )
                [ Leaf "Loss or Damage IS to Contents"
                , Leaf "Loss or Damage IS caused by birds"
                ]
            , All
                ( Pre "all of:" )
                [ Leaf "Loss or Damage IS ensuing covered loss"
                , All
                    ( Pre "all of:" )
                    [ Not
                        ( Leaf "any other exclusion applies" )
                    , All
                        ( Pre "an animal caused water to escape from" )
                        [ Not
                            ( Leaf "a household appliance" )
                        , Not
                            ( Leaf "a swimming pool" )
                        , Not
                            ( Leaf "a plumbing, heating, or air conditioning system" )
                        ]
                    ]
                ]
            ]
        ]
    )
]
toplevelDefaultMarking :: Marking
toplevelDefaultMarking = Marking $ Map.fromFoldable []